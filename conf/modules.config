/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]


    // PREPARE GENOME

    withName: STAR_GENOMEGENERATE {
        //ext.when = { params.fasta && params.gtf && !params.star && params.module.split(',').contains('circrna_discovery') && ( params.tool.split(',').contains('circexplorer2') || params.tool.split(',').contains('dcc') || params.tool.split(',').contains('circrna_finder') ) }
        ext.when = true
        ext.args = [ "",
            params.sjdboverhang ? "--sjdbOverhang ${params.sjdboverhang}" : '',
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/genome/index/star" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }


    // circRNA

    //DCC process config
    withName: DCC_1ST_PASS {
        //ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.when = true
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            params.alignSJDBoverhangMin ? "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}" : "",
            params.chimJunctionOverhangMin ? "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}" : "",
            params.chimSegmentMin ? "--chimSegmentMin ${params.chimSegmentMin}" :  ""
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/align/1st_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_SJDB {
        //ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.when = true
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/align/sjdb" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_2ND_PASS {
        //ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.when = true
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--sjdbFileChrStartEnd dataset.SJ.out.tab",
            params.alignSJDBoverhangMin ? "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}" : "--alignSJDBoverhangMin 10",
            params.chimJunctionOverhangMin ? "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}" : "--chimJunctionOverhangMin 10",
            params.chimSegmentMin ? "--chimSegmentMin ${params.chimSegmentMin}" :  "--chimSegmentMin 10"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/align/2nd_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_MATE1_1ST_PASS {
        //ext.when = { !meta.single_end && params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.when = true
        ext.prefix = { "${meta.id}_mate1" }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            params.alignSJDBoverhangMin ? "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}" : "",
            params.chimJunctionOverhangMin ? "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}" : "",
            params.chimSegmentMin ? "--chimSegmentMin ${params.chimSegmentMin}" :  ""
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate1/1st_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_MATE1_SJDB {
        //ext.when = { !meta.single_end && params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.when = true
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate1/sjdb" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_MATE1_2ND_PASS {
        //ext.when = { !meta.single_end && params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.when = true
        ext.prefix = { "${meta.id}_mate1" }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--sjdbFileChrStartEnd dataset.SJ.out.tab",
            params.alignSJDBoverhangMin ? "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}" : "--alignSJDBoverhangMin 10",
            params.chimJunctionOverhangMin ? "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}" : "--chimJunctionOverhangMin 10",
            params.chimSegmentMin ? "--chimSegmentMin ${params.chimSegmentMin}" :  "--chimSegmentMin 10"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate1/2nd_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_MATE2_1ST_PASS {
        //ext.when = { !meta.single_end && params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.when = true
        ext.prefix = { "${meta.id}_mate2" }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            params.alignSJDBoverhangMin ? "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}" : "",
            params.chimJunctionOverhangMin ? "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}" : "",
            params.chimSegmentMin ? "--chimSegmentMin ${params.chimSegmentMin}" :  ""
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate2/1st_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_MATE2_SJDB {
        //ext.when = { !meta.single_end && params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.when = true
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate2/sjdb" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_MATE2_2ND_PASS {
        //ext.when = { !meta.single_end && params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.when = true
        ext.prefix = { "${meta.id}_mate2" }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--sjdbFileChrStartEnd dataset.SJ.out.tab",
            params.alignSJDBoverhangMin ? "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}" : "--alignSJDBoverhangMin 10",
            params.chimJunctionOverhangMin ? "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}" : "--chimJunctionOverhangMin 10",
            params.chimSegmentMin ? "--chimSegmentMin ${params.chimSegmentMin}" :  "--chimSegmentMin 10"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate2/2nd_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC {
        //ext.when = { params.tool.split(',').contains('dcc') && params.module.split(',').contains('circrna_discovery') }
        ext.when = true
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }
}


process {
  withLabel:process_low {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withLabel:process_medium {
    cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
}