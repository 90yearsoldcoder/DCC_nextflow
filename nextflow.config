singularity {
    enabled = true
    autoMounts = true
}

docker {
    enabled = false
}


// those are default parameters
params {

    // Input options
    input                      = null
    outdir                     = './results'
    phenotype                  = null
    publish_dir_mode           = 'copy'

    
    // workflow option
    module                     = 'circrna_discovery'
    tool                       = 'DCC'
    save_intermediates         = true
    bsj_reads                  = 0
    
    //container or conda setting
    enable_conda               = false
    
    
    // reference genome options
    genome                     = null
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = false
    species                    = null
    save_reference             = true
    
    
    //> STAR
    chimJunctionOverhangMin    = 10
    alignSJDBoverhangMin       = 10
    chimSegmentMin             = 10
    sjdboverhang               = 100
}


// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig './conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

//parameters for profile(conda, singularity, docker)
profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}